---
description: 
globs: 
alwaysApply: true
---
# Automated Commit Workflow Rules for YouTube VJ React Project

## Overview

This rule set defines an automated commit workflow that triggers when users indicate their intention to commit. The workflow includes staging verification, diff analysis, commit message generation, and commit execution.

## Workflow Triggers

### User Intent Keywords
When users express commit intention using these phrases, the automated workflow should activate:

**Japanese Triggers:**
- "コミット"
- "コミットして"
- "コミットしたい"
- "コミットお願いします"
- "変更をコミット"
- "これをコミット"

**English Triggers:**
- "commit"
- "commit this"
- "commit changes"
- "make a commit"
- "please commit"
- "commit these changes"

## Automated Workflow Steps

### Step 1: Pre-Commit Validation
1. **Check git repository status**
   ```bash
   git status
   ```

2. **Verify staged changes exist**
   - If no changes staged: Ask user to specify files to stage
   - If changes staged: Proceed to Step 2

### Step 2: Staging Management
1. **NEVER auto-stage files (重要なルール)**
   - ❌ `git add .` や `git add <file>` を自動実行してはならない
   - ✅ 既にステージングされたファイルのみ処理する
   - ✅ ステージングされたファイルがない場合は、ユーザーに手動でのステージングを促す

2. **Handle unstaged changes**
   - If no staged changes: Display message asking user to stage files first
   - Example message: "ステージングされたファイルがありません。以下のコマンドでファイルをステージングしてください: `git add <filename>`"
   - Only proceed if staged changes exist

### Step 3: Diff Analysis
1. **Retrieve complete diff**
   ```bash
   git diff --cached | cat
   ```

2. **Handle new files**
   - For new files: Read file content directly
   - Explain that file content equals diff for new files

### Step 4: Commit Message Generation
1. **Analyze diff content**
   - Identify change types (feat, fix, docs, style, refactor, etc.)
   - Determine scope if applicable
   - Extract key changes for description

2. **Generate Conventional Commit message**
   ```
   <type>[optional scope]: <description>
   
   [optional body]
   
   [optional footer(s)]
   ```

3. **Validate message format**
   - **Ensure English language ONLY** - Never use Japanese or other languages
   - Verify Conventional Commits compliance
   - Check description clarity

### Step 5: Commit Execution
1. **Present commit message to user**
   ```
   Generated commit message:
   [commit message]
   
   Execute commit? (Auto-executing in 5 seconds...)
   ```

2. **Execute commit**
   ```bash
   git commit -m "[generated message]"
   ```

## Error Handling

### Diff Retrieval Issues
1. **Complete failure**: Request manual diff input
2. **New files**: Read file content directly with explanation

### Commit Failures
1. **Pre-commit hook failures**: Show lint errors and stop
2. **Merge conflicts**: Instruct user to resolve conflicts
3. **No changes**: Inform user and abort

## Safety Measures

### Staging Policy (最重要ルール)
- **絶対に `git add` を自動実行しない**
- ユーザーが明示的にステージングしたファイルのみ処理
- ステージングされていない場合は適切なメッセージでユーザーに促す
- ユーザーの意図しないファイルをコミットしないよう安全を確保

### User Confirmation
- Always show generated commit message before execution
- Provide 5-second countdown for abort opportunity
- Allow manual message editing if requested

### Rollback Capability
- Provide instructions for `git reset --soft HEAD^` if needed

## Commit Message Standards

### Types
- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code formatting
- **refactor**: Code restructuring
- **perf**: Performance improvements
- **test**: Testing additions/fixes
- **chore**: Build/tool changes

### Format Requirements
- **English language only (英語のみ)** - CRITICAL REQUIREMENT
  - All commit messages MUST be written in English
  - This ensures consistency and international compatibility
  - Even when user communicates in Japanese, commit messages are always English
  - Examples: "feat: add new feature" ✅, "feat: 新機能を追加" ❌
- Clear, concise descriptions
- Proper conventional commits structure
- Informative body for complex changes

## Workflow Customization

### Skip Confirmation Mode
If user adds "すぐに" or "immediately":
- Skip 5-second countdown
- Execute commit immediately after message generation

### Manual Message Mode
If user requests custom message:
- Generate suggested message
- Ask for user's preferred message
- Use user's message instead

## Example Workflows

### Successful Workflow
```
User: "コミットして"
→ Check git status
→ Verify staged changes exist
→ Analyze diff
→ Generate: "feat: add new YouTube player controls"
→ Execute commit
```

### No Staging Available Workflow
```
User: "コミットして"
→ Check git status
→ No staged changes found
→ Response: "ステージングされたファイルがありません。以下のコマンドでファイルをステージングしてください: `git add <filename>`"
→ Do NOT execute git add automatically
```

### Lint Error Workflow
```
User: "コミットしたい"
→ Pre-commit hook fails
→ Show lint errors
→ Response: "Please fix lint errors before committing"
```

This automated workflow ensures consistent, high-quality commits while reducing manual overhead for the user.
