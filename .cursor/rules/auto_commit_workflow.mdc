---
description:
globs:
alwaysApply: false
---
# Automated Commit Workflow Rules for YouTube VJ React Project

## Overview

This rule set defines an automated commit workflow that triggers when users indicate their intention to commit. The workflow includes staging verification, diff analysis, commit message generation, and commit execution.

## Workflow Triggers

### User Intent Keywords
When users express commit intention using these phrases, the automated workflow should activate:

**Japanese Triggers:**
- "コミット"
- "コミットして"
- "コミットしたい"
- "コミットお願いします"
- "変更をコミット"
- "これをコミット"

**English Triggers:**
- "commit"
- "commit this"
- "commit changes"
- "make a commit"
- "please commit"
- "commit these changes"

## Automated Workflow Steps

### Step 1: Pre-Commit Validation
1. **Verify working directory**
   ```bash
   cd /home/kazuki/dev/youtube-vj-react && pwd
   ```

2. **Check git repository status**
   ```bash
   git status
   ```

3. **Verify staged changes exist**
   - If no changes staged: Ask user to specify files to stage
   - If changes staged: Proceed to Step 2

### Step 2: Staging Management
1. **Check for unstaged changes**
   ```bash
   git diff --name-only
   ```

2. **Auto-stage if user indicates intent**
   ```bash
   git add .
   ```

3. **Confirm staging status**
   ```bash
   git status --porcelain
   ```

### Step 3: Diff Analysis
1. **Retrieve complete diff**
   ```bash
   git diff --cached
   ```

2. **Fallback for truncated output**
   ```bash
   git diff --cached | cat
   ```

3. **Handle new files**
   - For new files: Read file content directly
   - Explain that file content equals diff for new files

### Step 4: Commit Message Generation
1. **Analyze diff content**
   - Identify change types (feat, fix, docs, style, refactor, etc.)
   - Determine scope if applicable
   - Extract key changes for description

2. **Generate Conventional Commit message**
   ```
   <type>[optional scope]: <description>
   
   [optional body]
   
   [optional footer(s)]
   ```

3. **Validate message format**
   - Ensure English language
   - Verify Conventional Commits compliance
   - Check description clarity

### Step 5: Commit Execution
1. **Present commit message to user**
   ```
   Generated commit message:
   [commit message]
   
   Execute commit? (Auto-executing in 5 seconds...)
   ```

2. **Execute commit**
   ```bash
   git commit -m "[generated message]"
   ```

3. **Confirm commit success**
   ```bash
   git log --oneline -n 1
   ```

## Error Handling

### Terminal Command Failures
If commands fail, use reliable patterns:
```bash
cd /home/kazuki/dev/youtube-vj-react && [command]
```

### Diff Retrieval Issues
1. **Truncated output**: Try with `| cat`
2. **Complete failure**: Request manual diff input
3. **New files**: Read file content directly with explanation

### Commit Failures
1. **Pre-commit hook failures**: Show lint errors and stop
2. **Merge conflicts**: Instruct user to resolve conflicts
3. **No changes**: Inform user and abort

## Safety Measures

### Pre-Commit Checks
- Ensure Husky hooks are functional
- Verify lint-staged will run
- Check for syntax errors

### User Confirmation
- Always show generated commit message before execution
- Provide 5-second countdown for abort opportunity
- Allow manual message editing if requested

### Rollback Capability
- Provide instructions for `git reset --soft HEAD^` if needed
- Maintain git reflog for recovery

## Commit Message Standards

### Types
- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code formatting
- **refactor**: Code restructuring
- **perf**: Performance improvements
- **test**: Testing additions/fixes
- **chore**: Build/tool changes

### Format Requirements
- English language only
- Clear, concise descriptions
- Proper conventional commits structure
- Informative body for complex changes

## Workflow Customization

### Skip Confirmation Mode
If user adds "すぐに" or "immediately":
- Skip 5-second countdown
- Execute commit immediately after message generation

### Manual Message Mode
If user requests custom message:
- Generate suggested message
- Ask for user's preferred message
- Use user's message instead

### Selective Staging
If user specifies files:
- Stage only specified files
- Generate message based on selected changes

## Integration with Existing Rules

### Code Quality
- All existing TypeScript and React rules apply
- Biome formatting must pass
- No syntax errors allowed

### VJ Application Specific
- MIDI integration security maintained
- YouTube player state consistency verified
- Zustand store integrity checked

## Example Workflows

### Successful Workflow
```
User: "コミットして"
→ Check git status
→ Stage changes (git add .)
→ Analyze diff
→ Generate: "feat: add new YouTube player controls"
→ Execute commit
→ Confirm success
```

### Error Workflow
```
User: "コミット"
→ Check git status
→ No changes found
→ Response: "No changes to commit. Please make changes first."
```

### Lint Error Workflow
```
User: "コミットしたい"
→ Stage changes
→ Pre-commit hook fails
→ Show lint errors
→ Response: "Please fix lint errors before committing"
```

## Performance Considerations

### Parallel Operations
- Run git status and git diff in parallel when possible
- Use efficient git commands
- Minimize terminal round-trips

### Caching
- Cache git status between operations
- Reuse diff analysis if files unchanged
- Optimize for common workflow patterns

## Monitoring and Feedback

### Success Metrics
- Commit success rate
- Message quality scores
- User satisfaction feedback

### Error Tracking
- Terminal command failure rates
- Common error patterns
- User intervention requirements

## Continuous Improvement

### Message Quality
- Learn from user modifications
- Improve pattern recognition
- Enhance scope detection

### Workflow Optimization
- Reduce confirmation steps for trusted users
- Streamline common patterns
- Add shortcuts for frequent operations

This automated workflow ensures consistent, high-quality commits while reducing manual overhead for the user.
