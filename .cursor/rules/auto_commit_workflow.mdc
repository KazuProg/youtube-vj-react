---
description: Automated git commit workflow with conventional commits
globs: 
alwaysApply: true
---
# Automated Commit Workflow Rules for YouTube VJ React Project

## Overview

This rule set defines an automated commit workflow that triggers when users indicate their intention to commit. The workflow includes staging verification, diff analysis, commit message generation, and commit execution.

## Workflow Triggers

### User Intent Keywords
When users express commit intention using these phrases, the automated workflow should activate:

**Japanese Triggers:**
- "コミット"
- "コミットして"
- "コミットしたい"
- "コミットお願いします"
- "変更をコミット"
- "これをコミット"

**English Triggers:**
- "commit"
- "commit this"
- "commit changes"
- "make a commit"
- "please commit"
- "commit these changes"

## Automated Workflow Steps

### Step 1: Pre-Commit Validation
1. **Check git repository status**
   ```bash
   git status
   ```

2. **Verify staged changes exist**
   - If no changes staged: Ask user to specify files to stage
   - If changes staged: Proceed to Step 2

### Step 2: Staging Management
1. **NEVER auto-stage files (重要なルール)**
   - ❌ `git add .` や `git add <file>` を自動実行してはならない
   - ✅ 既にステージングされたファイルのみ処理する
   - ✅ ステージングされたファイルがない場合は、ユーザーに手動でのステージングを促す

2. **Handle unstaged changes**
   - If no staged changes: Display message asking user to stage files first
   - Example message: "ステージングされたファイルがありません。以下のコマンドでファイルをステージングしてください: `git add <filename>`"
   - Only proceed if staged changes exist

### Step 3: Diff Analysis (CRITICAL - MANDATORY VALIDATION)

**🚨 ABSOLUTE REQUIREMENT: MUST EXECUTE `git diff --cached` BEFORE ANY COMMIT OPERATION**

1. **Mandatory Diff Verification (絶対必須)**
   ```bash
   git status        # First: Check overall repository state
   git diff --cached | cat  # Second: MUST review staged changes
   ```

2. **Critical Pre-Commit Validation Checklist**
   - ✅ **MUST execute `git diff --cached` and analyze output**
   - ✅ **MUST verify that commit message matches ONLY staged files**
   - ✅ **MUST NOT include unstaged files in commit message**
   - ✅ **MUST respect user's intentional staging decisions**
   - ✅ **MUST generate commit message based ONLY on staged diff content**

3. **Staging Verification Rules**
   - **Never assume**: Always verify what is actually staged
   - **User Intent**: Respect user's explicit staging choices
   - **Accuracy**: Commit message must reflect ONLY staged changes
   - **Verification**: If unsure, ask user to confirm staging intent

4. **Diff Analysis Process**
   - **Complete diff retrieval**: Full `git diff --cached` output
   - **File-by-file analysis**: Review each staged file change
   - **Change type identification**: Categorize modifications appropriately
   - **Message alignment**: Ensure commit message describes actual staged changes

5. **Error Prevention**
   - **Mismatch Detection**: Flag if commit message doesn't match staged content
   - **Missing Files**: Never reference unstaged files in commit message
   - **User Communication**: Clearly explain what will be committed

6. **Handle new files**
   - For new files: Read file content directly
   - Explain that file content equals diff for new files

**VIOLATION CONSEQUENCES**: 
- If this step is skipped or executed incorrectly, it results in:
  - ❌ Inaccurate commit messages
  - ❌ Unintended file inclusion/exclusion
  - ❌ Loss of user trust and workflow integrity
  - ❌ Violation of explicit user staging decisions

### Step 4: Commit Message Generation
1. **Analyze diff content**
   - Identify change types (feat, fix, docs, style, refactor, etc.)
   - Determine scope if applicable
   - Extract key changes for description

2. **Generate Conventional Commit message**
   ```
   <type>[optional scope]: <description>
   
   [optional body]
   
   [optional footer(s)]
   ```

3. **Validate message format**
   - **Ensure English language ONLY** - Never use Japanese or other languages
   - Verify Conventional Commits compliance
   - Check description clarity

### Step 5: Commit Execution
1. **Present commit message to user**
   ```
   Generated commit message:
   [commit message]
   
   Execute commit? (Auto-executing...)
   ```

2. **Execute commit**
   ```bash
   git commit -m "[generated message]"
   ```

## Error Handling

### Diff Retrieval Issues
1. **Complete failure**: Request manual diff input
2. **New files**: Read file content directly with explanation

### Commit Failures
1. **Pre-commit hook failures**: Show lint errors and stop
2. **Merge conflicts**: Instruct user to resolve conflicts
3. **No changes**: Inform user and abort

## Safety Measures

### Critical Workflow Execution Policy (最重要ポリシー)
**🚨 ZERO TOLERANCE FOR WORKFLOW VIOLATIONS**

1. **Mandatory Verification Sequence**
   ```bash
   # MUST ALWAYS execute in this exact order:
   git status                    # 1. Check repository state
   git diff --cached | cat       # 2. Review staged changes
   # 3. Generate commit message based ONLY on staged diff
   # 4. Execute commit
   ```

2. **Forbidden Actions**
   - ❌ **NEVER commit without `git diff --cached` verification**
   - ❌ **NEVER generate commit messages without reviewing actual staged changes**
   - ❌ **NEVER assume what files are staged**
   - ❌ **NEVER include unstaged files in commit descriptions**
   - ❌ **NEVER override user's intentional staging decisions**

3. **Required Verification Points**
   - ✅ Staged files list matches commit message content
   - ✅ Unstaged files are explicitly excluded from commit message
   - ✅ User's staging intent is respected and preserved
   - ✅ Commit message accurately reflects actual changes being committed

### Staging Policy (最重要ルール)
- **絶対に `git add` を自動実行しない**
- ユーザーが明示的にステージングしたファイルのみ処理
- ステージングされていない場合は適切なメッセージでユーザーに促す
- ユーザーの意図しないファイルをコミットしないよう安全を確保

### User Confirmation
- Always show generated commit message before execution
- Present commit message for user review before execution
- Allow manual message editing if requested

### Rollback Capability
- Provide instructions for `git reset --soft HEAD^` if needed

### Diff Verification Accountability
- **Every commit operation MUST be preceded by diff verification**
- **Commit messages MUST be generated from actual staged content**
- **No exceptions**: This rule applies to ALL commit operations
- **Accountability**: Any violation of this policy is a critical workflow failure

## Commit Message Standards

### Types
- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code formatting
- **refactor**: Code restructuring
- **perf**: Performance improvements
- **test**: Testing additions/fixes
- **chore**: Build/tool changes
- **ci**: CI configuration and scripts
- **build**: Build system and external dependencies

### Format Requirements
- **English language only (英語のみ)** - CRITICAL REQUIREMENT
  - All commit messages MUST be written in English
  - This ensures consistency and international compatibility
  - Even when user communicates in Japanese, commit messages are always English
  - Examples: "feat: add new feature" ✅, "feat: 新機能を追加" ❌
- Clear, concise descriptions
- Proper conventional commits structure
- Informative body for complex changes

## Workflow Customization

### Skip Confirmation Mode
If user adds "すぐに" or "immediately":
- Skip confirmation prompt
- Execute commit immediately after message generation

### Manual Message Mode
If user requests custom message:
- Generate suggested message
- Ask for user's preferred message
- Use user's message instead

## Example Workflows

### Successful Workflow
```
User: "コミットして"
→ Check git status
→ Verify staged changes exist
→ Analyze diff with git diff --cached
→ Generate: "feat: add new YouTube player controls"
→ Execute commit
```

### No Staging Available Workflow
```
User: "コミットして"
→ Check git status
→ No staged changes found
→ Response: "ステージングされたファイルがありません。以下のコマンドでファイルをステージングしてください: `git add <filename>`"
→ Do NOT execute git add automatically
```

### Lint Error Workflow
```
User: "コミットしたい"
→ Pre-commit hook fails
→ Show lint errors
→ Response: "Please fix lint errors before committing"
```

### Critical Verification Workflow (NEW)
```
User: "コミット"
→ git status (check repository state)
→ git diff --cached | cat (MANDATORY - review staged changes)
→ Verify commit message matches ONLY staged files
→ Generate accurate commit message
→ Execute commit
```

This automated workflow ensures consistent, high-quality commits while maintaining strict verification standards and respecting user intent. 